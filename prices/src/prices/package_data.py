import json
import re
import subprocess
from pathlib import Path
from typing import TypeAlias

from .utils import package_dir as this_package_dir, root_dir


def package_data():
    data_path = this_package_dir / 'data.json'
    package_python_data(data_path)
    package_ts_data(data_path)


def package_python_data(data_path: Path):
    """Prep python package data."""

    from genai_prices.types import __file__ as genai_prices_file, providers_schema

    providers_schema.rebuild()
    providers = providers_schema.validate_json(data_path.read_bytes())

    data_content = f'''\
"""DO NOT EDIT THIS FILE DIRECTLY, INSTEAD RUN `make package-data`"""
import datetime
from decimal import Decimal

from .types import *

__all__ = ('providers',)

providers: list[Provider] = {providers}
'''

    py_package_dir = Path(genai_prices_file).parent
    data_py = py_package_dir / 'data.py'
    data_py.write_text(data_content)
    subprocess.run(['uv', 'run', 'ruff', 'format', str(data_py)], cwd=str(root_dir), check=True, stdout=subprocess.PIPE)

    data_content = data_py.read_text()
    data_content = re.sub('^ +[a-z_]+=None,$', '', data_content, flags=re.M)
    data_content = re.sub(r'TzInfo\(UTC\)', 'datetime.timezone.utc', data_content)
    data_py.write_text(data_content)
    subprocess.run(
        [
            'uv',
            'run',
            'ruff',
            'format',
            '--config',
            'format.skip-magic-trailing-comma = true',
            '--config',
            'lint.isort.split-on-trailing-comma = false',
            str(data_py),
        ],
        cwd=str(root_dir),
        check=True,
        stdout=subprocess.PIPE,
    )

    print(f'Data successfully written to {data_py.relative_to(root_dir)}')


def package_ts_data(data_path: Path):
    """Generate TypeScript data file from JSON data."""

    data = json.loads(data_path.read_bytes())
    fix_ts_constraints(data)

    ts_content = f"""// DO NOT EDIT THIS FILE DIRECTLY, INSTEAD RUN `make package-data`
import type {{ Provider }} from './types.js'
export const data: Provider[] = {json.dumps(data, indent=2, ensure_ascii=False)};
"""

    js_package_dir = root_dir / 'packages' / 'js'
    data_ts = js_package_dir / 'src' / 'data.ts'
    data_ts.write_text(ts_content)

    subprocess.run(
        ['npx', 'prettier', '--write', 'src/data.ts'],
        cwd=str(js_package_dir),
        check=True,
        stdout=subprocess.PIPE,
    )
    print(f'Data successfully written to {data_ts.relative_to(root_dir)}')


JsonData: TypeAlias = 'None | int | float | str | list[JsonData] | dict[str, JsonData]'


def fix_ts_constraints(json_data: JsonData) -> None:
    """Fix constraints in ConditionalPrice objects."""
    if isinstance(json_data, list):
        for item in json_data:
            fix_ts_constraints(item)
    elif isinstance(json_data, dict):
        # Fix constraints in ConditionalPrice
        if constraint := json_data.get('constraint'):
            if isinstance(constraint, dict) and 'type' not in constraint:
                if 'start_date' in constraint:
                    constraint['type'] = 'start_date'
                elif 'start_time' in constraint and 'end_time' in constraint:
                    constraint['type'] = 'time_of_date'

        # Recurse into nested objects
        for value in json_data.values():
            fix_ts_constraints(value)
