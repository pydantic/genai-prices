#!/usr/bin/env node

import fs from 'fs'
import path from 'path'
import { execSync } from 'child_process'
import { fileURLToPath } from 'url'

const __filename = fileURLToPath(import.meta.url)
const __dirname = path.dirname(__filename)

// Read the JSON data directly from the source
const dataPath = path.join(__dirname, '../../../prices/data.json')
const data = JSON.parse(fs.readFileSync(dataPath, 'utf-8'))

function fixConstraints(obj) {
  if (Array.isArray(obj)) {
    return obj.map(fixConstraints)
  } else if (obj && typeof obj === 'object') {
    // Fix constraints in ConditionalPrice
    if (obj.constraint) {
      if (obj.constraint.start_date && !obj.constraint.type) {
        obj.constraint.type = 'start_date'
      } else if (obj.constraint.start_time && obj.constraint.end_time && !obj.constraint.type) {
        obj.constraint.type = 'time_of_date'
      }
    }
    // Recurse into nested objects
    for (const key of Object.keys(obj)) {
      obj[key] = fixConstraints(obj[key])
    }
    return obj
  } else {
    return obj
  }
}

const fixedData = fixConstraints(data)

// Generate the TypeScript file
const tsContent = `// DO NOT EDIT THIS FILE DIRECTLY, INSTEAD RUN 'make package-data'
import type { Provider } from './types.js'
export const data: Provider[] = ${JSON.stringify(fixedData, null, 2)};
`

// Write the TypeScript file
const outputPath = path.join(__dirname, '../src/data.ts')
fs.writeFileSync(outputPath, tsContent)

console.log('✅ Generated src/data.ts from prices/data.json')

// Run prettier on the generated file
try {
  execSync('npx prettier --write src/data.ts', { cwd: path.join(__dirname, '..'), stdio: 'inherit' })
  console.log('✅ Formatted src/data.ts with prettier')
} catch (error) {
  console.log('⚠️  Prettier not available, skipping formatting')
}
